#include <cstdio>
#include <assert.h>
#include <iostream>
using namespace std;
#include "vops.h"
#include "product.h"
namespace ANONYMOUS{

void multTest__Wrapper() {
  multTest();
}
void multTest__WrapperNospec() {}
void multTest() {
  bool _tt0[3] = {0, 0, 0};
  int*  __sa42= new int [2 * 3]; CopyArr<int >(__sa42,_tt0, 2 * 3, 3);
  int _tt1[2] = {1, 2};
  CopyArr<int >((__sa42+ 0),_tt1, 2, 2);
  int _tt2[2] = {1, 5};
  CopyArr<int >((__sa42+ 2),_tt2, 2, 2);
  int _tt3[2] = {3, 4};
  CopyArr<int >((__sa42+ 4),_tt3, 2, 2);
  bool _tt4[2] = {0, 0};
  int*  __sa43= new int [3 * 2]; CopyArr<int >(__sa43,_tt4, 3 * 2, 2);
  int _tt5[3] = {1, 2, 3};
  CopyArr<int >((__sa43+ 0),_tt5, 3, 3);
  int _tt6[3] = {0, 2, 1};
  CopyArr<int >((__sa43+ 3),_tt6, 3, 3);
  bool _tt7[3] = {0, 0, 0};
  int*  _out_s1= new int [3 * 3]; CopyArr<int >(_out_s1,_tt7, 3 * 3, 3);
  productSK(3, 2, 2, 3, __sa42, __sa43, _out_s1);
  bool _tt8[3] = {0, 0, 0};
  int*  __sa44= new int [3 * 3]; CopyArr<int >(__sa44,_tt8, 3 * 3, 3);
  int _tt9[3] = {1, 6, 5};
  CopyArr<int >((__sa44+ 0),_tt9, 3, 3);
  int _tt10[3] = {1, 12, 8};
  CopyArr<int >((__sa44+ 3),_tt10, 3, 3);
  int _tt11[3] = {3, 14, 13};
  CopyArr<int >((__sa44+ 6),_tt11, 3, 3);
  assert (arrCompare(_out_s1, (3 * 3), __sa44, (3 * 3)) && (((3) == (3)) && ((3) == (3))));;
  bool _tt12[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa45= new int [1 * 6]; CopyArr<int >(__sa45,_tt12, 1 * 6, 6);
  int _tt13[1] = {4};
  CopyArr<int >((__sa45+ 0),_tt13, 1, 1);
  int _tt14[1] = {3};
  CopyArr<int >((__sa45+ 1),_tt14, 1, 1);
  int _tt15[1] = {3};
  CopyArr<int >((__sa45+ 2),_tt15, 1, 1);
  int _tt16[1] = {2};
  CopyArr<int >((__sa45+ 3),_tt16, 1, 1);
  bool _tt17[1] = {1};
  CopyArr<int >((__sa45+ 4),_tt17, 1, 1);
  int _tt18[1] = {10};
  CopyArr<int >((__sa45+ 5),_tt18, 1, 1);
  bool _tt19[1] = {0};
  int*  __sa46= new int [1 * 1]; CopyArr<int >(__sa46,_tt19, 1 * 1, 1);
  int _tt20[1] = {8};
  CopyArr<int >((__sa46+ 0),_tt20, 1, 1);
  bool _tt21[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s3= new int [1 * 6]; CopyArr<int >(_out_s3,_tt21, 1 * 6, 6);
  productSK(6, 1, 1, 1, __sa45, __sa46, _out_s3);
  bool _tt22[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa47= new int [1 * 6]; CopyArr<int >(__sa47,_tt22, 1 * 6, 6);
  int _tt23[1] = {32};
  CopyArr<int >((__sa47+ 0),_tt23, 1, 1);
  int _tt24[1] = {24};
  CopyArr<int >((__sa47+ 1),_tt24, 1, 1);
  int _tt25[1] = {24};
  CopyArr<int >((__sa47+ 2),_tt25, 1, 1);
  int _tt26[1] = {16};
  CopyArr<int >((__sa47+ 3),_tt26, 1, 1);
  int _tt27[1] = {8};
  CopyArr<int >((__sa47+ 4),_tt27, 1, 1);
  int _tt28[1] = {80};
  CopyArr<int >((__sa47+ 5),_tt28, 1, 1);
  assert (arrCompare(_out_s3, (1 * 6), __sa47, (1 * 6)) && (((6) == (6)) && ((1) == (1))));;
  bool _tt29[1] = {0};
  int*  __sa48= new int [5 * 1]; CopyArr<int >(__sa48,_tt29, 5 * 1, 1);
  int _tt30[5] = {0, 0, 1, 3, 3};
  CopyArr<int >((__sa48+ 0),_tt30, 5, 5);
  bool _tt31[5] = {0, 0, 0, 0, 0};
  int*  __sa49= new int [4 * 5]; CopyArr<int >(__sa49,_tt31, 4 * 5, 5);
  int _tt32[4] = {8, 9, 0, 8};
  CopyArr<int >((__sa49+ 0),_tt32, 4, 4);
  int _tt33[4] = {3, 10, 8, 6};
  CopyArr<int >((__sa49+ 4),_tt33, 4, 4);
  int _tt34[4] = {3, 7, 9, 4};
  CopyArr<int >((__sa49+ 8),_tt34, 4, 4);
  int _tt35[4] = {0, 2, 6, 5};
  CopyArr<int >((__sa49+ 12),_tt35, 4, 4);
  int _tt36[4] = {4, 2, 3, 5};
  CopyArr<int >((__sa49+ 16),_tt36, 4, 4);
  bool _tt37[1] = {0};
  int*  _out_s5= new int [4 * 1]; CopyArr<int >(_out_s5,_tt37, 4 * 1, 1);
  productSK(1, 5, 5, 4, __sa48, __sa49, _out_s5);
  bool _tt38[1] = {0};
  int*  __sa50= new int [4 * 1]; CopyArr<int >(__sa50,_tt38, 4 * 1, 1);
  int _tt39[4] = {15, 19, 36, 34};
  CopyArr<int >((__sa50+ 0),_tt39, 4, 4);
  assert (arrCompare(_out_s5, (4 * 1), __sa50, (4 * 1)) && (((1) == (1)) && ((4) == (4))));;
  bool _tt40[1] = {0};
  bool*  __sa51= new bool [1 * 1]; CopyArr<bool >(__sa51,_tt40, 1 * 1, 1);
  bool _tt41[1] = {1};
  CopyArr<bool >((__sa51+ 0),_tt41, 1, 1);
  bool _tt42[1] = {0};
  int*  __sa52= new int [1 * 1]; CopyArr<int >(__sa52,_tt42, 1 * 1, 1);
  for (int  __sa53=0;(__sa53) < (1);__sa53 = __sa53 + 1){
    assert (((__sa53) >= (0)) && ((__sa53) < (1)));;
    assert (((__sa53) >= (0)) && ((__sa53) < (1)));;
    CopyArr<int >((__sa52+ __sa53),(__sa51+ __sa53), 1, 1);
  }
  bool _tt43[1] = {0};
  int*  __sa55= new int [4 * 1]; CopyArr<int >(__sa55,_tt43, 4 * 1, 1);
  int _tt44[4] = {5, 5, 9, 4};
  CopyArr<int >((__sa55+ 0),_tt44, 4, 4);
  bool _tt45[1] = {0};
  int*  _out_s7= new int [4 * 1]; CopyArr<int >(_out_s7,_tt45, 4 * 1, 1);
  productSK(1, 1, 1, 4, __sa52, __sa55, _out_s7);
  bool _tt46[1] = {0};
  int*  __sa56= new int [4 * 1]; CopyArr<int >(__sa56,_tt46, 4 * 1, 1);
  int _tt47[4] = {5, 5, 9, 4};
  CopyArr<int >((__sa56+ 0),_tt47, 4, 4);
  assert (arrCompare(_out_s7, (4 * 1), __sa56, (4 * 1)) && (((1) == (1)) && ((4) == (4))));;
  bool _tt48[1] = {0};
  int*  __sa57= new int [6 * 1]; CopyArr<int >(__sa57,_tt48, 6 * 1, 1);
  int _tt49[6] = {8, 1, 6, 1, 8, 4};
  CopyArr<int >((__sa57+ 0),_tt49, 6, 6);
  bool _tt50[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa58= new int [4 * 6]; CopyArr<int >(__sa58,_tt50, 4 * 6, 6);
  int _tt51[4] = {10, 9, 5, 9};
  CopyArr<int >((__sa58+ 0),_tt51, 4, 4);
  int _tt52[4] = {3, 1, 0, 10};
  CopyArr<int >((__sa58+ 4),_tt52, 4, 4);
  int _tt53[4] = {3, 4, 1, 3};
  CopyArr<int >((__sa58+ 8),_tt53, 4, 4);
  int _tt54[4] = {1, 6, 4, 7};
  CopyArr<int >((__sa58+ 12),_tt54, 4, 4);
  int _tt55[4] = {10, 5, 2, 5};
  CopyArr<int >((__sa58+ 16),_tt55, 4, 4);
  int _tt56[4] = {5, 3, 10, 4};
  CopyArr<int >((__sa58+ 20),_tt56, 4, 4);
  bool _tt57[1] = {0};
  int*  _out_s9= new int [4 * 1]; CopyArr<int >(_out_s9,_tt57, 4 * 1, 1);
  productSK(1, 6, 6, 4, __sa57, __sa58, _out_s9);
  bool _tt58[1] = {0};
  int*  __sa59= new int [4 * 1]; CopyArr<int >(__sa59,_tt58, 4 * 1, 1);
  int _tt59[4] = {202, 155, 106, 163};
  CopyArr<int >((__sa59+ 0),_tt59, 4, 4);
  assert (arrCompare(_out_s9, (4 * 1), __sa59, (4 * 1)) && (((1) == (1)) && ((4) == (4))));;
  bool _tt60[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa60= new int [6 * 6]; CopyArr<int >(__sa60,_tt60, 6 * 6, 6);
  int _tt61[6] = {1, 9, 10, 2, 8, 3};
  CopyArr<int >((__sa60+ 0),_tt61, 6, 6);
  int _tt62[6] = {2, 7, 6, 4, 10, 8};
  CopyArr<int >((__sa60+ 6),_tt62, 6, 6);
  int _tt63[6] = {3, 10, 5, 0, 3, 0};
  CopyArr<int >((__sa60+ 12),_tt63, 6, 6);
  int _tt64[6] = {5, 6, 4, 1, 3, 9};
  CopyArr<int >((__sa60+ 18),_tt64, 6, 6);
  int _tt65[6] = {5, 3, 10, 7, 6, 10};
  CopyArr<int >((__sa60+ 24),_tt65, 6, 6);
  int _tt66[6] = {7, 2, 4, 2, 3, 8};
  CopyArr<int >((__sa60+ 30),_tt66, 6, 6);
  bool _tt67[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa61= new int [6 * 6]; CopyArr<int >(__sa61,_tt67, 6 * 6, 6);
  int _tt68[6] = {8, 4, 9, 6, 9, 6};
  CopyArr<int >((__sa61+ 0),_tt68, 6, 6);
  int _tt69[6] = {5, 3, 2, 8, 7, 1};
  CopyArr<int >((__sa61+ 6),_tt69, 6, 6);
  int _tt70[6] = {0, 1, 2, 10, 2, 10};
  CopyArr<int >((__sa61+ 12),_tt70, 6, 6);
  int _tt71[6] = {6, 9, 1, 6, 6, 9};
  CopyArr<int >((__sa61+ 18),_tt71, 6, 6);
  int _tt72[6] = {7, 8, 4, 8, 0, 10};
  CopyArr<int >((__sa61+ 24),_tt72, 6, 6);
  int _tt73[6] = {1, 10, 8, 4, 10, 5};
  CopyArr<int >((__sa61+ 30),_tt73, 6, 6);
  bool _tt74[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s11= new int [6 * 6]; CopyArr<int >(_out_s11,_tt74, 6 * 6, 6);
  productSK(6, 6, 6, 6, __sa60, __sa61, _out_s11);
  bool _tt75[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa62= new int [6 * 6]; CopyArr<int >(__sa62,_tt75, 6 * 6, 6);
  int _tt76[6] = {124, 153, 105, 266, 134, 228};
  CopyArr<int >((__sa62+ 0),_tt76, 6, 6);
  int _tt77[6] = {153, 231, 152, 264, 183, 255};
  CopyArr<int >((__sa62+ 6),_tt77, 6, 6);
  int _tt78[6] = {95, 71, 69, 172, 107, 108};
  CopyArr<int >((__sa62+ 12),_tt78, 6, 6);
  int _tt79[6] = {106, 165, 150, 184, 191, 160};
  CopyArr<int >((__sa62+ 18),_tt79, 6, 6);
  int _tt80[6] = {149, 250, 182, 284, 228, 306};
  CopyArr<int >((__sa62+ 24),_tt80, 6, 6);
  int _tt81[6] = {107, 160, 153, 166, 177, 172};
  CopyArr<int >((__sa62+ 30),_tt81, 6, 6);
  assert (arrCompare(_out_s11, (6 * 6), __sa62, (6 * 6)) && (((6) == (6)) && ((6) == (6))));;
  bool _tt82[1] = {0};
  int*  __sa63= new int [3 * 1]; CopyArr<int >(__sa63,_tt82, 3 * 1, 1);
  int _tt83[3] = {2, 7, 0};
  CopyArr<int >((__sa63+ 0),_tt83, 3, 3);
  bool _tt84[3] = {0, 0, 0};
  int*  __sa64= new int [4 * 3]; CopyArr<int >(__sa64,_tt84, 4 * 3, 3);
  int _tt85[4] = {4, 8, 2, 8};
  CopyArr<int >((__sa64+ 0),_tt85, 4, 4);
  int _tt86[4] = {1, 10, 4, 10};
  CopyArr<int >((__sa64+ 4),_tt86, 4, 4);
  int _tt87[4] = {8, 9, 3, 2};
  CopyArr<int >((__sa64+ 8),_tt87, 4, 4);
  bool _tt88[1] = {0};
  int*  _out_s13= new int [4 * 1]; CopyArr<int >(_out_s13,_tt88, 4 * 1, 1);
  productSK(1, 3, 3, 4, __sa63, __sa64, _out_s13);
  bool _tt89[1] = {0};
  int*  __sa65= new int [4 * 1]; CopyArr<int >(__sa65,_tt89, 4 * 1, 1);
  int _tt90[4] = {15, 86, 32, 86};
  CopyArr<int >((__sa65+ 0),_tt90, 4, 4);
  assert (arrCompare(_out_s13, (4 * 1), __sa65, (4 * 1)) && (((1) == (1)) && ((4) == (4))));;
  bool _tt91[3] = {0, 0, 0};
  int*  __sa66= new int [2 * 3]; CopyArr<int >(__sa66,_tt91, 2 * 3, 3);
  int _tt92[2] = {8, 0};
  CopyArr<int >((__sa66+ 0),_tt92, 2, 2);
  int _tt93[2] = {9, 5};
  CopyArr<int >((__sa66+ 2),_tt93, 2, 2);
  int _tt94[2] = {7, 0};
  CopyArr<int >((__sa66+ 4),_tt94, 2, 2);
  bool _tt95[2] = {0, 0};
  int*  __sa67= new int [5 * 2]; CopyArr<int >(__sa67,_tt95, 5 * 2, 2);
  int _tt96[5] = {1, 5, 4, 3, 0};
  CopyArr<int >((__sa67+ 0),_tt96, 5, 5);
  int _tt97[5] = {3, 9, 1, 1, 7};
  CopyArr<int >((__sa67+ 5),_tt97, 5, 5);
  bool _tt98[3] = {0, 0, 0};
  int*  _out_s15= new int [5 * 3]; CopyArr<int >(_out_s15,_tt98, 5 * 3, 3);
  productSK(3, 2, 2, 5, __sa66, __sa67, _out_s15);
  bool _tt99[3] = {0, 0, 0};
  int*  __sa68= new int [5 * 3]; CopyArr<int >(__sa68,_tt99, 5 * 3, 3);
  int _tt100[5] = {8, 40, 32, 24, 0};
  CopyArr<int >((__sa68+ 0),_tt100, 5, 5);
  int _tt101[5] = {24, 90, 41, 32, 35};
  CopyArr<int >((__sa68+ 5),_tt101, 5, 5);
  int _tt102[5] = {7, 35, 28, 21, 0};
  CopyArr<int >((__sa68+ 10),_tt102, 5, 5);
  assert (arrCompare(_out_s15, (5 * 3), __sa68, (5 * 3)) && (((3) == (3)) && ((5) == (5))));;
  bool _tt103[1] = {0};
  int*  __sa69= new int [5 * 1]; CopyArr<int >(__sa69,_tt103, 5 * 1, 1);
  int _tt104[5] = {2, 10, 7, 8, 2};
  CopyArr<int >((__sa69+ 0),_tt104, 5, 5);
  bool _tt105[5] = {0, 0, 0, 0, 0};
  int*  __sa70= new int [2 * 5]; CopyArr<int >(__sa70,_tt105, 2 * 5, 5);
  int _tt106[2] = {4, 8};
  CopyArr<int >((__sa70+ 0),_tt106, 2, 2);
  int _tt107[2] = {9, 6};
  CopyArr<int >((__sa70+ 2),_tt107, 2, 2);
  int _tt108[2] = {3, 8};
  CopyArr<int >((__sa70+ 4),_tt108, 2, 2);
  int _tt109[2] = {3, 4};
  CopyArr<int >((__sa70+ 6),_tt109, 2, 2);
  int _tt110[2] = {6, 10};
  CopyArr<int >((__sa70+ 8),_tt110, 2, 2);
  bool _tt111[1] = {0};
  int*  _out_s17= new int [2 * 1]; CopyArr<int >(_out_s17,_tt111, 2 * 1, 1);
  productSK(1, 5, 5, 2, __sa69, __sa70, _out_s17);
  bool _tt112[1] = {0};
  int*  __sa71= new int [2 * 1]; CopyArr<int >(__sa71,_tt112, 2 * 1, 1);
  int _tt113[2] = {155, 184};
  CopyArr<int >((__sa71+ 0),_tt113, 2, 2);
  assert (arrCompare(_out_s17, (2 * 1), __sa71, (2 * 1)) && (((1) == (1)) && ((2) == (2))));;
  bool _tt114[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa72= new int [3 * 6]; CopyArr<int >(__sa72,_tt114, 3 * 6, 6);
  int _tt115[3] = {8, 7, 1};
  CopyArr<int >((__sa72+ 0),_tt115, 3, 3);
  int _tt116[3] = {3, 3, 1};
  CopyArr<int >((__sa72+ 3),_tt116, 3, 3);
  int _tt117[3] = {5, 0, 9};
  CopyArr<int >((__sa72+ 6),_tt117, 3, 3);
  int _tt118[3] = {8, 3, 9};
  CopyArr<int >((__sa72+ 9),_tt118, 3, 3);
  int _tt119[3] = {3, 0, 1};
  CopyArr<int >((__sa72+ 12),_tt119, 3, 3);
  int _tt120[3] = {10, 0, 3};
  CopyArr<int >((__sa72+ 15),_tt120, 3, 3);
  bool _tt121[3] = {0, 0, 0};
  int*  __sa73= new int [4 * 3]; CopyArr<int >(__sa73,_tt121, 4 * 3, 3);
  int _tt122[4] = {1, 0, 5, 1};
  CopyArr<int >((__sa73+ 0),_tt122, 4, 4);
  int _tt123[4] = {8, 3, 4, 10};
  CopyArr<int >((__sa73+ 4),_tt123, 4, 4);
  int _tt124[4] = {7, 3, 8, 2};
  CopyArr<int >((__sa73+ 8),_tt124, 4, 4);
  bool _tt125[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s19= new int [4 * 6]; CopyArr<int >(_out_s19,_tt125, 4 * 6, 6);
  productSK(6, 3, 3, 4, __sa72, __sa73, _out_s19);
  bool _tt126[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa74= new int [4 * 6]; CopyArr<int >(__sa74,_tt126, 4 * 6, 6);
  int _tt127[4] = {71, 24, 76, 80};
  CopyArr<int >((__sa74+ 0),_tt127, 4, 4);
  int _tt128[4] = {34, 12, 35, 35};
  CopyArr<int >((__sa74+ 4),_tt128, 4, 4);
  int _tt129[4] = {68, 27, 97, 23};
  CopyArr<int >((__sa74+ 8),_tt129, 4, 4);
  int _tt130[4] = {95, 36, 124, 56};
  CopyArr<int >((__sa74+ 12),_tt130, 4, 4);
  int _tt131[4] = {10, 3, 23, 5};
  CopyArr<int >((__sa74+ 16),_tt131, 4, 4);
  int _tt132[4] = {31, 9, 74, 16};
  CopyArr<int >((__sa74+ 20),_tt132, 4, 4);
  assert (arrCompare(_out_s19, (4 * 6), __sa74, (4 * 6)) && (((6) == (6)) && ((4) == (4))));;
  bool _tt133[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa75= new int [5 * 6]; CopyArr<int >(__sa75,_tt133, 5 * 6, 6);
  int _tt134[5] = {7, 3, 7, 6, 3};
  CopyArr<int >((__sa75+ 0),_tt134, 5, 5);
  int _tt135[5] = {1, 1, 10, 6, 5};
  CopyArr<int >((__sa75+ 5),_tt135, 5, 5);
  int _tt136[5] = {6, 6, 7, 0, 10};
  CopyArr<int >((__sa75+ 10),_tt136, 5, 5);
  int _tt137[5] = {10, 10, 1, 0, 6};
  CopyArr<int >((__sa75+ 15),_tt137, 5, 5);
  int _tt138[5] = {5, 1, 3, 3, 3};
  CopyArr<int >((__sa75+ 20),_tt138, 5, 5);
  int _tt139[5] = {8, 7, 2, 6, 2};
  CopyArr<int >((__sa75+ 25),_tt139, 5, 5);
  bool _tt140[5] = {0, 0, 0, 0, 0};
  int*  __sa76= new int [5 * 5]; CopyArr<int >(__sa76,_tt140, 5 * 5, 5);
  int _tt141[5] = {4, 7, 3, 1, 7};
  CopyArr<int >((__sa76+ 0),_tt141, 5, 5);
  int _tt142[5] = {8, 1, 0, 10, 8};
  CopyArr<int >((__sa76+ 5),_tt142, 5, 5);
  int _tt143[5] = {0, 1, 3, 2, 6};
  CopyArr<int >((__sa76+ 10),_tt143, 5, 5);
  int _tt144[5] = {7, 7, 3, 6, 0};
  CopyArr<int >((__sa76+ 15),_tt144, 5, 5);
  int _tt145[5] = {2, 6, 0, 6, 4};
  CopyArr<int >((__sa76+ 20),_tt145, 5, 5);
  bool _tt146[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s21= new int [5 * 6]; CopyArr<int >(_out_s21,_tt146, 5 * 6, 6);
  productSK(6, 5, 5, 5, __sa75, __sa76, _out_s21);
  bool _tt147[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa77= new int [5 * 6]; CopyArr<int >(__sa77,_tt147, 5 * 6, 6);
  int _tt148[5] = {100, 119, 60, 105, 127};
  CopyArr<int >((__sa77+ 0),_tt148, 5, 5);
  int _tt149[5] = {64, 90, 51, 97, 95};
  CopyArr<int >((__sa77+ 5),_tt149, 5, 5);
  int _tt150[5] = {92, 115, 39, 140, 172};
  CopyArr<int >((__sa77+ 10),_tt150, 5, 5);
  int _tt151[5] = {132, 117, 33, 148, 180};
  CopyArr<int >((__sa77+ 15),_tt151, 5, 5);
  int _tt152[5] = {55, 78, 33, 57, 73};
  CopyArr<int >((__sa77+ 20),_tt152, 5, 5);
  int _tt153[5] = {134, 119, 48, 130, 132};
  CopyArr<int >((__sa77+ 25),_tt153, 5, 5);
  assert (arrCompare(_out_s21, (5 * 6), __sa77, (5 * 6)) && (((6) == (6)) && ((5) == (5))));;
  bool _tt154[4] = {0, 0, 0, 0};
  int*  __sa78= new int [3 * 4]; CopyArr<int >(__sa78,_tt154, 3 * 4, 4);
  int _tt155[3] = {8, 10, 7};
  CopyArr<int >((__sa78+ 0),_tt155, 3, 3);
  int _tt156[3] = {2, 3, 4};
  CopyArr<int >((__sa78+ 3),_tt156, 3, 3);
  int _tt157[3] = {3, 0, 9};
  CopyArr<int >((__sa78+ 6),_tt157, 3, 3);
  int _tt158[3] = {8, 0, 5};
  CopyArr<int >((__sa78+ 9),_tt158, 3, 3);
  bool _tt159[3] = {0, 0, 0};
  int*  __sa79= new int [4 * 3]; CopyArr<int >(__sa79,_tt159, 4 * 3, 3);
  int _tt160[4] = {0, 0, 9, 7};
  CopyArr<int >((__sa79+ 0),_tt160, 4, 4);
  int _tt161[4] = {8, 8, 2, 0};
  CopyArr<int >((__sa79+ 4),_tt161, 4, 4);
  int _tt162[4] = {8, 1, 2, 1};
  CopyArr<int >((__sa79+ 8),_tt162, 4, 4);
  bool _tt163[4] = {0, 0, 0, 0};
  int*  _out_s23= new int [4 * 4]; CopyArr<int >(_out_s23,_tt163, 4 * 4, 4);
  productSK(4, 3, 3, 4, __sa78, __sa79, _out_s23);
  bool _tt164[4] = {0, 0, 0, 0};
  int*  __sa80= new int [4 * 4]; CopyArr<int >(__sa80,_tt164, 4 * 4, 4);
  int _tt165[4] = {136, 87, 106, 63};
  CopyArr<int >((__sa80+ 0),_tt165, 4, 4);
  int _tt166[4] = {56, 28, 32, 18};
  CopyArr<int >((__sa80+ 4),_tt166, 4, 4);
  int _tt167[4] = {72, 9, 45, 30};
  CopyArr<int >((__sa80+ 8),_tt167, 4, 4);
  int _tt168[4] = {40, 5, 82, 61};
  CopyArr<int >((__sa80+ 12),_tt168, 4, 4);
  assert (arrCompare(_out_s23, (4 * 4), __sa80, (4 * 4)) && (((4) == (4)) && ((4) == (4))));;
  bool _tt169[5] = {0, 0, 0, 0, 0};
  int*  __sa81= new int [1 * 5]; CopyArr<int >(__sa81,_tt169, 1 * 5, 5);
  int _tt170[1] = {3};
  CopyArr<int >((__sa81+ 0),_tt170, 1, 1);
  int _tt171[1] = {6};
  CopyArr<int >((__sa81+ 1),_tt171, 1, 1);
  bool _tt172[1] = {1};
  CopyArr<int >((__sa81+ 2),_tt172, 1, 1);
  int _tt173[1] = {9};
  CopyArr<int >((__sa81+ 3),_tt173, 1, 1);
  int _tt174[1] = {3};
  CopyArr<int >((__sa81+ 4),_tt174, 1, 1);
  bool _tt175[1] = {0};
  int*  __sa82= new int [6 * 1]; CopyArr<int >(__sa82,_tt175, 6 * 1, 1);
  int _tt176[6] = {9, 9, 0, 9, 1, 6};
  CopyArr<int >((__sa82+ 0),_tt176, 6, 6);
  bool _tt177[5] = {0, 0, 0, 0, 0};
  int*  _out_s25= new int [6 * 5]; CopyArr<int >(_out_s25,_tt177, 6 * 5, 5);
  productSK(5, 1, 1, 6, __sa81, __sa82, _out_s25);
  bool _tt178[5] = {0, 0, 0, 0, 0};
  int*  __sa83= new int [6 * 5]; CopyArr<int >(__sa83,_tt178, 6 * 5, 5);
  int _tt179[6] = {27, 27, 0, 27, 3, 18};
  CopyArr<int >((__sa83+ 0),_tt179, 6, 6);
  int _tt180[6] = {54, 54, 0, 54, 6, 36};
  CopyArr<int >((__sa83+ 6),_tt180, 6, 6);
  int _tt181[6] = {9, 9, 0, 9, 1, 6};
  CopyArr<int >((__sa83+ 12),_tt181, 6, 6);
  int _tt182[6] = {81, 81, 0, 81, 9, 54};
  CopyArr<int >((__sa83+ 18),_tt182, 6, 6);
  int _tt183[6] = {27, 27, 0, 27, 3, 18};
  CopyArr<int >((__sa83+ 24),_tt183, 6, 6);
  assert (arrCompare(_out_s25, (6 * 5), __sa83, (6 * 5)) && (((5) == (5)) && ((6) == (6))));;
  bool _tt184[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa84= new int [5 * 6]; CopyArr<int >(__sa84,_tt184, 5 * 6, 6);
  int _tt185[5] = {8, 5, 4, 3, 10};
  CopyArr<int >((__sa84+ 0),_tt185, 5, 5);
  int _tt186[5] = {5, 3, 4, 6, 2};
  CopyArr<int >((__sa84+ 5),_tt186, 5, 5);
  int _tt187[5] = {10, 10, 4, 7, 5};
  CopyArr<int >((__sa84+ 10),_tt187, 5, 5);
  int _tt188[5] = {1, 0, 7, 9, 9};
  CopyArr<int >((__sa84+ 15),_tt188, 5, 5);
  int _tt189[5] = {1, 1, 8, 3, 8};
  CopyArr<int >((__sa84+ 20),_tt189, 5, 5);
  int _tt190[5] = {4, 2, 5, 1, 3};
  CopyArr<int >((__sa84+ 25),_tt190, 5, 5);
  bool _tt191[5] = {0, 0, 0, 0, 0};
  int*  __sa85= new int [5 * 5]; CopyArr<int >(__sa85,_tt191, 5 * 5, 5);
  int _tt192[5] = {5, 4, 2, 7, 8};
  CopyArr<int >((__sa85+ 0),_tt192, 5, 5);
  int _tt193[5] = {4, 9, 10, 8, 0};
  CopyArr<int >((__sa85+ 5),_tt193, 5, 5);
  int _tt194[5] = {10, 8, 4, 10, 1};
  CopyArr<int >((__sa85+ 10),_tt194, 5, 5);
  int _tt195[5] = {2, 4, 1, 1, 8};
  CopyArr<int >((__sa85+ 15),_tt195, 5, 5);
  int _tt196[5] = {2, 4, 4, 9, 3};
  CopyArr<int >((__sa85+ 20),_tt196, 5, 5);
  bool _tt197[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s27= new int [5 * 6]; CopyArr<int >(_out_s27,_tt197, 5 * 6, 6);
  productSK(6, 5, 5, 5, __sa84, __sa85, _out_s27);
  bool _tt198[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa86= new int [5 * 6]; CopyArr<int >(__sa86,_tt198, 5 * 6, 6);
  int _tt199[5] = {126, 161, 125, 229, 122};
  CopyArr<int >((__sa86+ 0),_tt199, 5, 5);
  int _tt200[5] = {93, 111, 70, 123, 98};
  CopyArr<int >((__sa86+ 5),_tt200, 5, 5);
  int _tt201[5] = {154, 210, 163, 242, 155};
  CopyArr<int >((__sa86+ 10),_tt201, 5, 5);
  int _tt202[5] = {111, 132, 75, 167, 114};
  CopyArr<int >((__sa86+ 15),_tt202, 5, 5);
  int _tt203[5] = {111, 121, 79, 170, 64};
  CopyArr<int >((__sa86+ 20),_tt203, 5, 5);
  int _tt204[5] = {86, 90, 61, 122, 54};
  CopyArr<int >((__sa86+ 25),_tt204, 5, 5);
  assert (arrCompare(_out_s27, (5 * 6), __sa86, (5 * 6)) && (((6) == (6)) && ((5) == (5))));;
  bool _tt205[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa87= new int [3 * 6]; CopyArr<int >(__sa87,_tt205, 3 * 6, 6);
  int _tt206[3] = {10, 10, 4};
  CopyArr<int >((__sa87+ 0),_tt206, 3, 3);
  int _tt207[3] = {8, 7, 4};
  CopyArr<int >((__sa87+ 3),_tt207, 3, 3);
  int _tt208[3] = {0, 1, 10};
  CopyArr<int >((__sa87+ 6),_tt208, 3, 3);
  int _tt209[3] = {6, 4, 0};
  CopyArr<int >((__sa87+ 9),_tt209, 3, 3);
  int _tt210[3] = {0, 5, 2};
  CopyArr<int >((__sa87+ 12),_tt210, 3, 3);
  int _tt211[3] = {10, 4, 2};
  CopyArr<int >((__sa87+ 15),_tt211, 3, 3);
  bool _tt212[3] = {0, 0, 0};
  int*  __sa88= new int [2 * 3]; CopyArr<int >(__sa88,_tt212, 2 * 3, 3);
  int _tt213[2] = {7, 8};
  CopyArr<int >((__sa88+ 0),_tt213, 2, 2);
  int _tt214[2] = {6, 8};
  CopyArr<int >((__sa88+ 2),_tt214, 2, 2);
  bool _tt215[2] = {0, 1};
  CopyArr<int >((__sa88+ 4),_tt215, 2, 2);
  bool _tt216[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s29= new int [2 * 6]; CopyArr<int >(_out_s29,_tt216, 2 * 6, 6);
  productSK(6, 3, 3, 2, __sa87, __sa88, _out_s29);
  bool _tt217[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa89= new int [2 * 6]; CopyArr<int >(__sa89,_tt217, 2 * 6, 6);
  int _tt218[2] = {130, 164};
  CopyArr<int >((__sa89+ 0),_tt218, 2, 2);
  int _tt219[2] = {98, 124};
  CopyArr<int >((__sa89+ 2),_tt219, 2, 2);
  int _tt220[2] = {6, 18};
  CopyArr<int >((__sa89+ 4),_tt220, 2, 2);
  int _tt221[2] = {66, 80};
  CopyArr<int >((__sa89+ 6),_tt221, 2, 2);
  int _tt222[2] = {30, 42};
  CopyArr<int >((__sa89+ 8),_tt222, 2, 2);
  int _tt223[2] = {94, 114};
  CopyArr<int >((__sa89+ 10),_tt223, 2, 2);
  assert (arrCompare(_out_s29, (2 * 6), __sa89, (2 * 6)) && (((6) == (6)) && ((2) == (2))));;
  bool _tt224[1] = {0};
  int*  __sa90= new int [6 * 1]; CopyArr<int >(__sa90,_tt224, 6 * 1, 1);
  int _tt225[6] = {8, 0, 5, 9, 8, 2};
  CopyArr<int >((__sa90+ 0),_tt225, 6, 6);
  bool _tt226[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa91= new int [2 * 6]; CopyArr<int >(__sa91,_tt226, 2 * 6, 6);
  int _tt227[2] = {6, 2};
  CopyArr<int >((__sa91+ 0),_tt227, 2, 2);
  int _tt228[2] = {0, 4};
  CopyArr<int >((__sa91+ 2),_tt228, 2, 2);
  int _tt229[2] = {5, 0};
  CopyArr<int >((__sa91+ 4),_tt229, 2, 2);
  int _tt230[2] = {5, 3};
  CopyArr<int >((__sa91+ 6),_tt230, 2, 2);
  int _tt231[2] = {10, 3};
  CopyArr<int >((__sa91+ 8),_tt231, 2, 2);
  int _tt232[2] = {10, 1};
  CopyArr<int >((__sa91+ 10),_tt232, 2, 2);
  bool _tt233[1] = {0};
  int*  _out_s31= new int [2 * 1]; CopyArr<int >(_out_s31,_tt233, 2 * 1, 1);
  productSK(1, 6, 6, 2, __sa90, __sa91, _out_s31);
  bool _tt234[1] = {0};
  int*  __sa92= new int [2 * 1]; CopyArr<int >(__sa92,_tt234, 2 * 1, 1);
  int _tt235[2] = {218, 69};
  CopyArr<int >((__sa92+ 0),_tt235, 2, 2);
  assert (arrCompare(_out_s31, (2 * 1), __sa92, (2 * 1)) && (((1) == (1)) && ((2) == (2))));;
  bool _tt236[3] = {0, 0, 0};
  int*  __sa93= new int [5 * 3]; CopyArr<int >(__sa93,_tt236, 5 * 3, 3);
  int _tt237[5] = {9, 2, 3, 2, 2};
  CopyArr<int >((__sa93+ 0),_tt237, 5, 5);
  int _tt238[5] = {6, 0, 2, 5, 6};
  CopyArr<int >((__sa93+ 5),_tt238, 5, 5);
  int _tt239[5] = {10, 3, 4, 2, 1};
  CopyArr<int >((__sa93+ 10),_tt239, 5, 5);
  bool _tt240[5] = {0, 0, 0, 0, 0};
  int*  __sa94= new int [4 * 5]; CopyArr<int >(__sa94,_tt240, 4 * 5, 5);
  int _tt241[4] = {6, 0, 7, 3};
  CopyArr<int >((__sa94+ 0),_tt241, 4, 4);
  int _tt242[4] = {3, 7, 5, 4};
  CopyArr<int >((__sa94+ 4),_tt242, 4, 4);
  int _tt243[4] = {3, 3, 0, 10};
  CopyArr<int >((__sa94+ 8),_tt243, 4, 4);
  int _tt244[4] = {3, 6, 5, 4};
  CopyArr<int >((__sa94+ 12),_tt244, 4, 4);
  int _tt245[4] = {1, 4, 5, 10};
  CopyArr<int >((__sa94+ 16),_tt245, 4, 4);
  bool _tt246[3] = {0, 0, 0};
  int*  _out_s33= new int [4 * 3]; CopyArr<int >(_out_s33,_tt246, 4 * 3, 3);
  productSK(3, 5, 5, 4, __sa93, __sa94, _out_s33);
  bool _tt247[3] = {0, 0, 0};
  int*  __sa95= new int [4 * 3]; CopyArr<int >(__sa95,_tt247, 4 * 3, 3);
  int _tt248[4] = {77, 43, 93, 93};
  CopyArr<int >((__sa95+ 0),_tt248, 4, 4);
  int _tt249[4] = {63, 60, 97, 118};
  CopyArr<int >((__sa95+ 4),_tt249, 4, 4);
  int _tt250[4] = {88, 49, 100, 100};
  CopyArr<int >((__sa95+ 8),_tt250, 4, 4);
  assert (arrCompare(_out_s33, (4 * 3), __sa95, (4 * 3)) && (((3) == (3)) && ((4) == (4))));;
  bool _tt251[5] = {0, 0, 0, 0, 0};
  int*  __sa96= new int [4 * 5]; CopyArr<int >(__sa96,_tt251, 4 * 5, 5);
  int _tt252[4] = {8, 5, 0, 1};
  CopyArr<int >((__sa96+ 0),_tt252, 4, 4);
  int _tt253[4] = {4, 2, 9, 4};
  CopyArr<int >((__sa96+ 4),_tt253, 4, 4);
  int _tt254[4] = {0, 1, 9, 6};
  CopyArr<int >((__sa96+ 8),_tt254, 4, 4);
  int _tt255[4] = {5, 5, 6, 9};
  CopyArr<int >((__sa96+ 12),_tt255, 4, 4);
  int _tt256[4] = {8, 1, 6, 9};
  CopyArr<int >((__sa96+ 16),_tt256, 4, 4);
  bool _tt257[4] = {0, 0, 0, 0};
  int*  __sa97= new int [6 * 4]; CopyArr<int >(__sa97,_tt257, 6 * 4, 4);
  int _tt258[6] = {3, 4, 0, 6, 0, 8};
  CopyArr<int >((__sa97+ 0),_tt258, 6, 6);
  int _tt259[6] = {8, 10, 10, 3, 5, 6};
  CopyArr<int >((__sa97+ 6),_tt259, 6, 6);
  int _tt260[6] = {1, 10, 5, 9, 5, 10};
  CopyArr<int >((__sa97+ 12),_tt260, 6, 6);
  int _tt261[6] = {1, 4, 8, 4, 10, 6};
  CopyArr<int >((__sa97+ 18),_tt261, 6, 6);
  bool _tt262[5] = {0, 0, 0, 0, 0};
  int*  _out_s35= new int [6 * 5]; CopyArr<int >(_out_s35,_tt262, 6 * 5, 5);
  productSK(5, 4, 4, 6, __sa96, __sa97, _out_s35);
  bool _tt263[5] = {0, 0, 0, 0, 0};
  int*  __sa98= new int [6 * 5]; CopyArr<int >(__sa98,_tt263, 6 * 5, 5);
  int _tt264[6] = {65, 86, 58, 67, 35, 100};
  CopyArr<int >((__sa98+ 0),_tt264, 6, 6);
  int _tt265[6] = {41, 142, 97, 127, 95, 158};
  CopyArr<int >((__sa98+ 6),_tt265, 6, 6);
  int _tt266[6] = {23, 124, 103, 108, 110, 132};
  CopyArr<int >((__sa98+ 12),_tt266, 6, 6);
  int _tt267[6] = {70, 166, 152, 135, 145, 184};
  CopyArr<int >((__sa98+ 18),_tt267, 6, 6);
  int _tt268[6] = {47, 138, 112, 141, 125, 184};
  CopyArr<int >((__sa98+ 24),_tt268, 6, 6);
  assert (arrCompare(_out_s35, (6 * 5), __sa98, (6 * 5)) && (((5) == (5)) && ((6) == (6))));;
  bool _tt269[3] = {0, 0, 0};
  int*  __sa99= new int [4 * 3]; CopyArr<int >(__sa99,_tt269, 4 * 3, 3);
  int _tt270[4] = {4, 8, 2, 3};
  CopyArr<int >((__sa99+ 0),_tt270, 4, 4);
  int _tt271[4] = {6, 10, 6, 10};
  CopyArr<int >((__sa99+ 4),_tt271, 4, 4);
  int _tt272[4] = {2, 9, 9, 4};
  CopyArr<int >((__sa99+ 8),_tt272, 4, 4);
  bool _tt273[4] = {0, 0, 0, 0};
  int*  __sa100= new int [6 * 4]; CopyArr<int >(__sa100,_tt273, 6 * 4, 4);
  int _tt274[6] = {6, 8, 0, 4, 4, 3};
  CopyArr<int >((__sa100+ 0),_tt274, 6, 6);
  int _tt275[6] = {6, 9, 9, 10, 5, 7};
  CopyArr<int >((__sa100+ 6),_tt275, 6, 6);
  int _tt276[6] = {7, 7, 10, 3, 8, 7};
  CopyArr<int >((__sa100+ 12),_tt276, 6, 6);
  int _tt277[6] = {2, 10, 1, 4, 8, 10};
  CopyArr<int >((__sa100+ 18),_tt277, 6, 6);
  bool _tt278[3] = {0, 0, 0};
  int*  _out_s37= new int [6 * 3]; CopyArr<int >(_out_s37,_tt278, 6 * 3, 3);
  productSK(3, 4, 4, 6, __sa99, __sa100, _out_s37);
  bool _tt279[3] = {0, 0, 0};
  int*  __sa101= new int [6 * 3]; CopyArr<int >(__sa101,_tt279, 6 * 3, 3);
  int _tt280[6] = {92, 148, 95, 114, 96, 112};
  CopyArr<int >((__sa101+ 0),_tt280, 6, 6);
  int _tt281[6] = {158, 280, 160, 182, 202, 230};
  CopyArr<int >((__sa101+ 6),_tt281, 6, 6);
  int _tt282[6] = {137, 200, 175, 141, 157, 172};
  CopyArr<int >((__sa101+ 12),_tt282, 6, 6);
  assert (arrCompare(_out_s37, (6 * 3), __sa101, (6 * 3)) && (((3) == (3)) && ((6) == (6))));;
  bool _tt283[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa102= new int [5 * 6]; CopyArr<int >(__sa102,_tt283, 5 * 6, 6);
  int _tt284[5] = {1, 3, 10, 4, 3};
  CopyArr<int >((__sa102+ 0),_tt284, 5, 5);
  int _tt285[5] = {3, 2, 0, 0, 3};
  CopyArr<int >((__sa102+ 5),_tt285, 5, 5);
  int _tt286[5] = {7, 9, 1, 7, 6};
  CopyArr<int >((__sa102+ 10),_tt286, 5, 5);
  int _tt287[5] = {10, 9, 3, 6, 7};
  CopyArr<int >((__sa102+ 15),_tt287, 5, 5);
  int _tt288[5] = {6, 3, 2, 10, 0};
  CopyArr<int >((__sa102+ 20),_tt288, 5, 5);
  int _tt289[5] = {1, 6, 3, 2, 8};
  CopyArr<int >((__sa102+ 25),_tt289, 5, 5);
  bool _tt290[5] = {0, 0, 0, 0, 0};
  int*  __sa103= new int [3 * 5]; CopyArr<int >(__sa103,_tt290, 3 * 5, 5);
  int _tt291[3] = {7, 0, 8};
  CopyArr<int >((__sa103+ 0),_tt291, 3, 3);
  int _tt292[3] = {3, 1, 7};
  CopyArr<int >((__sa103+ 3),_tt292, 3, 3);
  int _tt293[3] = {2, 7, 10};
  CopyArr<int >((__sa103+ 6),_tt293, 3, 3);
  int _tt294[3] = {8, 8, 9};
  CopyArr<int >((__sa103+ 9),_tt294, 3, 3);
  int _tt295[3] = {5, 7, 9};
  CopyArr<int >((__sa103+ 12),_tt295, 3, 3);
  bool _tt296[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s39= new int [3 * 6]; CopyArr<int >(_out_s39,_tt296, 3 * 6, 6);
  productSK(6, 5, 5, 3, __sa102, __sa103, _out_s39);
  bool _tt297[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa104= new int [3 * 6]; CopyArr<int >(__sa104,_tt297, 3 * 6, 6);
  int _tt298[3] = {83, 126, 192};
  CopyArr<int >((__sa104+ 0),_tt298, 3, 3);
  int _tt299[3] = {42, 23, 65};
  CopyArr<int >((__sa104+ 3),_tt299, 3, 3);
  int _tt300[3] = {164, 114, 246};
  CopyArr<int >((__sa104+ 6),_tt300, 3, 3);
  int _tt301[3] = {186, 127, 290};
  CopyArr<int >((__sa104+ 9),_tt301, 3, 3);
  int _tt302[3] = {135, 97, 179};
  CopyArr<int >((__sa104+ 12),_tt302, 3, 3);
  int _tt303[3] = {87, 99, 170};
  CopyArr<int >((__sa104+ 15),_tt303, 3, 3);
  assert (arrCompare(_out_s39, (3 * 6), __sa104, (3 * 6)) && (((6) == (6)) && ((3) == (3))));;
  bool _tt304[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa105= new int [5 * 6]; CopyArr<int >(__sa105,_tt304, 5 * 6, 6);
  int _tt305[5] = {8, 7, 2, 7, 7};
  CopyArr<int >((__sa105+ 0),_tt305, 5, 5);
  int _tt306[5] = {4, 3, 10, 4, 8};
  CopyArr<int >((__sa105+ 5),_tt306, 5, 5);
  int _tt307[5] = {7, 10, 3, 4, 7};
  CopyArr<int >((__sa105+ 10),_tt307, 5, 5);
  int _tt308[5] = {1, 4, 3, 4, 5};
  CopyArr<int >((__sa105+ 15),_tt308, 5, 5);
  int _tt309[5] = {5, 8, 1, 2, 2};
  CopyArr<int >((__sa105+ 20),_tt309, 5, 5);
  int _tt310[5] = {3, 6, 2, 3, 1};
  CopyArr<int >((__sa105+ 25),_tt310, 5, 5);
  bool _tt311[5] = {0, 0, 0, 0, 0};
  int*  __sa106= new int [4 * 5]; CopyArr<int >(__sa106,_tt311, 4 * 5, 5);
  int _tt312[4] = {6, 6, 5, 8};
  CopyArr<int >((__sa106+ 0),_tt312, 4, 4);
  int _tt313[4] = {7, 6, 0, 3};
  CopyArr<int >((__sa106+ 4),_tt313, 4, 4);
  int _tt314[4] = {6, 6, 9, 0};
  CopyArr<int >((__sa106+ 8),_tt314, 4, 4);
  int _tt315[4] = {9, 6, 7, 0};
  CopyArr<int >((__sa106+ 12),_tt315, 4, 4);
  int _tt316[4] = {5, 4, 6, 6};
  CopyArr<int >((__sa106+ 16),_tt316, 4, 4);
  bool _tt317[6] = {0, 0, 0, 0, 0, 0};
  int*  _out_s41= new int [4 * 6]; CopyArr<int >(_out_s41,_tt317, 4 * 6, 6);
  productSK(6, 5, 5, 4, __sa105, __sa106, _out_s41);
  bool _tt318[6] = {0, 0, 0, 0, 0, 0};
  int*  __sa107= new int [4 * 6]; CopyArr<int >(__sa107,_tt318, 4 * 6, 6);
  int _tt319[4] = {207, 172, 149, 127};
  CopyArr<int >((__sa107+ 0),_tt319, 4, 4);
  int _tt320[4] = {181, 158, 186, 89};
  CopyArr<int >((__sa107+ 4),_tt320, 4, 4);
  int _tt321[4] = {201, 172, 132, 128};
  CopyArr<int >((__sa107+ 8),_tt321, 4, 4);
  int _tt322[4] = {113, 92, 90, 50};
  CopyArr<int >((__sa107+ 12),_tt322, 4, 4);
  int _tt323[4] = {120, 104, 60, 76};
  CopyArr<int >((__sa107+ 16),_tt323, 4, 4);
  int _tt324[4] = {104, 88, 60, 48};
  CopyArr<int >((__sa107+ 20),_tt324, 4, 4);
  assert (arrCompare(_out_s41, (4 * 6), __sa107, (4 * 6)) && (((6) == (6)) && ((4) == (4))));;
  delete[] __sa42;
  delete[] __sa43;
  delete[] _out_s1;
  delete[] __sa44;
  delete[] __sa45;
  delete[] __sa46;
  delete[] _out_s3;
  delete[] __sa47;
  delete[] __sa48;
  delete[] __sa49;
  delete[] _out_s5;
  delete[] __sa50;
  delete[] __sa51;
  delete[] __sa52;
  delete[] __sa55;
  delete[] _out_s7;
  delete[] __sa56;
  delete[] __sa57;
  delete[] __sa58;
  delete[] _out_s9;
  delete[] __sa59;
  delete[] __sa60;
  delete[] __sa61;
  delete[] _out_s11;
  delete[] __sa62;
  delete[] __sa63;
  delete[] __sa64;
  delete[] _out_s13;
  delete[] __sa65;
  delete[] __sa66;
  delete[] __sa67;
  delete[] _out_s15;
  delete[] __sa68;
  delete[] __sa69;
  delete[] __sa70;
  delete[] _out_s17;
  delete[] __sa71;
  delete[] __sa72;
  delete[] __sa73;
  delete[] _out_s19;
  delete[] __sa74;
  delete[] __sa75;
  delete[] __sa76;
  delete[] _out_s21;
  delete[] __sa77;
  delete[] __sa78;
  delete[] __sa79;
  delete[] _out_s23;
  delete[] __sa80;
  delete[] __sa81;
  delete[] __sa82;
  delete[] _out_s25;
  delete[] __sa83;
  delete[] __sa84;
  delete[] __sa85;
  delete[] _out_s27;
  delete[] __sa86;
  delete[] __sa87;
  delete[] __sa88;
  delete[] _out_s29;
  delete[] __sa89;
  delete[] __sa90;
  delete[] __sa91;
  delete[] _out_s31;
  delete[] __sa92;
  delete[] __sa93;
  delete[] __sa94;
  delete[] _out_s33;
  delete[] __sa95;
  delete[] __sa96;
  delete[] __sa97;
  delete[] _out_s35;
  delete[] __sa98;
  delete[] __sa99;
  delete[] __sa100;
  delete[] _out_s37;
  delete[] __sa101;
  delete[] __sa102;
  delete[] __sa103;
  delete[] _out_s39;
  delete[] __sa104;
  delete[] __sa105;
  delete[] __sa106;
  delete[] _out_s41;
  delete[] __sa107;
}
void productSK(int M, int N, int P, int Q, int* a/* len = N * M */, int* b/* len = Q * P */, int* _out/* len = Q * M */) {
  for (int  __sa108=0;(__sa108) < (M);__sa108 = __sa108 + 1){
    assert (((__sa108) >= (0)) && ((__sa108) < (M)));;
    CopyArr<int >((_out+ Q * __sa108),0, Q);
  }
  assert ((P) == (N));;
  int  sum=0;
  for (int  i=0;(i) < (M);i = i + 1){
    for (int  j=0;(j) < (Q);j = j + 1){
      sum = 0;
      for (int  k=0;(k) < (P);k = k + 1){
        assert (((i) >= (0)) && ((i) < (M)));;
        assert (((k) >= (0)) && ((k) < (N)));;
        assert (((k) >= (0)) && ((k) < (P)));;
        assert (((j) >= (0)) && ((j) < (Q)));;
        sum = sum + ((a[((N * i) + k)]) * (b[((Q * k) + j)]));
      }
      assert (((i) >= (0)) && ((i) < (M)));;
      assert (((j) >= (0)) && ((j) < (Q)));;
      (_out[(Q * i) + j]) = sum;
    }
  }
  return;
}

}
