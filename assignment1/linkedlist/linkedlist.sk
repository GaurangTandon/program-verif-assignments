/*
Problem Number: 2
=================

Task 1 : Implement the append(List lst, Node n) function which takes a
linked list, and a Node and appends the given node to the linked list.

Task 2 : Implement the insertAt(List lst, int pos) function which
takes a linked list, a node and the position where the node should be
inserted in the list, and returns the list with the node inserted at
that position.
*/
struct Node{
       Node next;
       int val;
}

struct List{
       Node head;
}

List append(List lst, Node n) {
  Node head = lst.head;

  if(head == null){
    lst.head = n;
    return lst;
  }

  while(head.next != null){
    head = head.next;
  }

  head.next = n;
  return lst;
}

List insertAt(List lst, Node n, int pos) {
  Node head = lst.head;

  if(pos == 0){
    n.next = head;
    lst.head = n;
    return lst;
  }

  assert(head != null);

  pos--;

  while(pos > 0){
    pos--;
    assert(head != null);
    head = head.next;
  }

  n.next = head.next;
  head.next = n;
  return lst;
}



List populate(List l) {
  // this function adds a few nodes to an empty list.  This is used
  // for providing input-output examples.
  // returns: 5 -> 60
  Node n2 = new Node(next = null, val = 60);
  Node n0 = new Node(next = n2, val = 5);
  Node n1 = new Node(next = n0, val = 65);
  l.head = n1;
  return l;
}


harness void testAppend(){
  List l = new List();
  l = populate(l);

  // assert for append
  Node n1 = new Node(next = null, val = 40);
  List l1 = append(l, n1);
  assert l1.head.next.next.next.val == 40;

  Node n0 = new Node(next = null, val = 45);
  l = new List();
  l = append(l, n0);
  assert l.head.val == 45;
}


harness void testInsert(){
  List l = new List();
  l = populate(l);

  // test insert at 1
  Node n1 = new Node(next = null, val = 70);
  // assert for insertAt
  List l2 = insertAt(l, n1, 1);
  assert l2.head.next.val == 70;
  assert l2.head.val == 65;
  assert l2.head.next.next.val == 5;
  assert l2.head.next.next.next.val == 60;

  // test insert at 0 at front
  Node n2 = new Node(next = null, val = 90);
  l = new List();
  l = populate(l);
  l2 = insertAt(l, n2, 0);
  assert l2.head.val == 90;
  assert l2.head.next.val == 65;
  assert l2.head.next.next.val == 5;
  assert l2.head.next.next.next.val == 60;

  // test insert at far end
  Node n3 = new Node(next = null, val = 100);
  l = new List();
  l = populate(l);
  l2 = insertAt(l, n3, 3);
  assert l2.head.val == 65;
  assert l2.head.next.val == 5;
  assert l2.head.next.next.val == 60;
  assert l2.head.next.next.next.val == 100;
}
